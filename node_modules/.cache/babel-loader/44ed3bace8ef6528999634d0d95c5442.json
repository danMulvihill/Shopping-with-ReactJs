{"ast":null,"code":"import _toConsumableArray from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dan/react-sites/shoppingApp/src/Todo.js\";\nimport React, { Component } from \"react\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      newItem: \"\",\n      list: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // for all items in state\n      for (var key in this.state) {\n        // if the key exists in localStorage\n        if (localStorage.hasOwnProperty(key)) {\n          // get the key's value from localStorage\n          var value = localStorage.getItem(key); // parse the localStorage string and setState\n\n          try {\n            value = JSON.parse(value);\n            this.setState(_defineProperty({}, key, value));\n          } catch (e) {\n            // handle empty string\n            this.setState(_defineProperty({}, key, value));\n          }\n        }\n      } // add event listener to save state to localStorage\n      // when user leaves/refreshes the page\n\n\n      window.addEventListener(\"beforeunload\", this.saveStateToLocalStorage.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"beforeunload\", this.saveStateToLocalStorage.bind(this)); // saves if component has a chance to unmount\n\n      this.saveStateToLocalStorage();\n    }\n  }, {\n    key: \"hydrateStateWithLocalStorage\",\n    value: function hydrateStateWithLocalStorage() {}\n  }, {\n    key: \"saveStateToLocalStorage\",\n    value: function saveStateToLocalStorage() {\n      // for every item in React state\n      for (var key in this.state) {\n        // save to localStorage\n        localStorage.setItem(key, JSON.stringify(this.state[key]));\n      }\n    }\n  }, {\n    key: \"updateInput\",\n    value: function updateInput(key, value) {\n      // update react state\n      this.setState(_defineProperty({}, key, value)); // update localStorage\n      //localStorage.setItem(key, value);\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem() {\n      // create a new item\n      var newItem = {\n        id: 1 + Math.random(),\n        value: this.state.newItem.slice()\n      }; // copy current list of items\n\n      var list = _toConsumableArray(this.state.list); // add the new item to the list\n\n\n      list.push(newItem); // update state with new list, reset the new item input\n\n      this.setState({\n        list: list,\n        newItem: \"\"\n      }); //localStorage\n      //localStorage.setItem('list', JSON.stringify(list));\n      //localStorage.setItem('newItem', '');\n    }\n  }, {\n    key: \"deleteItem\",\n    value: function deleteItem(id) {\n      // copy current list of items\n      var list = _toConsumableArray(this.state.list); // filter out the item being deleted\n\n\n      var updatedList = list.filter(function (item) {\n        return item.id !== id;\n      });\n      this.setState({\n        list: updatedList\n      }); //upadate localStorage\n      //localStorage.setItem('list', JSON.stringify(updatedList));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"App-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Welcome to React LocalStorage Tutorial\")), React.createElement(\"div\", {\n        style: {\n          padding: 50,\n          textAlign: \"left\",\n          maxWidth: 500,\n          margin: \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Add an item to the list\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Type item here\",\n        value: this.state.newItem,\n        onChange: function onChange(e) {\n          return _this2.updateInput(\"newItem\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.addItem();\n        },\n        disabled: !this.state.newItem.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"+ Add\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.state.list.map(function (item) {\n        return React.createElement(\"li\", {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, item.value, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.deleteItem(item.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Remove\"));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/dan/react-sites/shoppingApp/src/Todo.js"],"names":["React","Component","App","props","state","newItem","list","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","e","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","setItem","stringify","id","Math","random","slice","push","updatedList","filter","item","padding","textAlign","maxWidth","margin","updateInput","target","addItem","length","map","deleteItem"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAGMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,IAAI,EAAE;AAFK,KAAb;AAFiB;AAMlB;;;;wCAGmB;AAClB;AACA,WAAK,IAAIC,GAAT,IAAgB,KAAKH,KAArB,EAA4B;AACxB;AACA,YAAII,YAAY,CAACC,cAAb,CAA4BF,GAA5B,CAAJ,EAAsC;AACpC;AACA,cAAIG,KAAK,GAAGF,YAAY,CAACG,OAAb,CAAqBJ,GAArB,CAAZ,CAFoC,CAIpC;;AACA,cAAI;AACFG,YAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAR;AACA,iBAAKI,QAAL,qBAAiBP,GAAjB,EAAuBG,KAAvB;AACD,WAHD,CAGE,OAAOK,CAAP,EAAU;AACV;AACA,iBAAKD,QAAL,qBAAiBP,GAAjB,EAAuBG,KAAvB;AACD;AACF;AACF,OAjBe,CAmBlB;AACA;;;AACAM,MAAAA,MAAM,CAACC,gBAAP,CACE,cADF,EAEE,KAAKC,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAFF;AAID;;;2CAEsB;AACrBH,MAAAA,MAAM,CAACI,mBAAP,CACE,cADF,EAEE,KAAKF,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAFF,EADqB,CAMrB;;AACA,WAAKD,uBAAL;AACD;;;mDAE8B,CAE9B;;;8CAEyB;AACxB;AACA,WAAK,IAAIX,GAAT,IAAgB,KAAKH,KAArB,EAA4B;AAC1B;AACAI,QAAAA,YAAY,CAACa,OAAb,CAAqBd,GAArB,EAA0BK,IAAI,CAACU,SAAL,CAAe,KAAKlB,KAAL,CAAWG,GAAX,CAAf,CAA1B;AACD;AACF;;;gCAEWA,G,EAAKG,K,EAAO;AACtB;AACA,WAAKI,QAAL,qBAAiBP,GAAjB,EAAuBG,KAAvB,GAFsB,CAItB;AACA;AACD;;;8BAGS;AACR;AACA,UAAML,OAAO,GAAG;AACdkB,QAAAA,EAAE,EAAE,IAAIC,IAAI,CAACC,MAAL,EADM;AAEdf,QAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWC,OAAX,CAAmBqB,KAAnB;AAFO,OAAhB,CAFQ,CAOR;;AACA,UAAMpB,IAAI,sBAAO,KAAKF,KAAL,CAAWE,IAAlB,CAAV,CARQ,CAUR;;;AACAA,MAAAA,IAAI,CAACqB,IAAL,CAAUtB,OAAV,EAXQ,CAaR;;AACA,WAAKS,QAAL,CAAc;AACZR,QAAAA,IAAI,EAAJA,IADY;AAEZD,QAAAA,OAAO,EAAE;AAFG,OAAd,EAdQ,CAmBR;AACA;AACA;AACD;;;+BAEUkB,E,EAAI;AACb;AACA,UAAMjB,IAAI,sBAAO,KAAKF,KAAL,CAAWE,IAAlB,CAAV,CAFa,CAGb;;;AACA,UAAMsB,WAAW,GAAGtB,IAAI,CAACuB,MAAL,CAAY,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACP,EAAL,KAAYA,EAAhB;AAAA,OAAhB,CAApB;AAEA,WAAKT,QAAL,CAAc;AAAER,QAAAA,IAAI,EAAEsB;AAAR,OAAd,EANa,CAQb;AACA;AACD;;;6BAGQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAFF,CADF,EAKE;AACE,QAAA,KAAK,EAAE;AACLG,UAAAA,OAAO,EAAE,EADJ;AAELC,UAAAA,SAAS,EAAE,MAFN;AAGLC,UAAAA,QAAQ,EAAE,GAHL;AAILC,UAAAA,MAAM,EAAE;AAJH,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAUE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,gBAFd;AAGE,QAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWC,OAHpB;AAIE,QAAA,QAAQ,EAAE,kBAAAU,CAAC;AAAA,iBAAI,MAAI,CAACoB,WAAL,CAAiB,SAAjB,EAA4BpB,CAAC,CAACqB,MAAF,CAAS1B,KAArC,CAAJ;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVF,EAgBE;AACE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC2B,OAAL,EAAN;AAAA,SADX;AAEE,QAAA,QAAQ,EAAE,CAAC,KAAKjC,KAAL,CAAWC,OAAX,CAAmBiC,MAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAhBF,EAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBF,OAsBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBT,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKlC,KAAL,CAAWE,IAAX,CAAgBiC,GAAhB,CAAoB,UAAAT,IAAI,EAAI;AAC3B,eACE;AAAI,UAAA,GAAG,EAAEA,IAAI,CAACP,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGO,IAAI,CAACpB,KADR,EAEE;AAAQ,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAAC8B,UAAL,CAAgBV,IAAI,CAACP,EAArB,CAAN;AAAA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF;AAQD,OATA,CADH,CAvBF,CALF,CADF;AA4CD;;;;EAtJetB,S;;AAyJlB,eAAeC,GAAf","sourcesContent":["import React, { Component } from \"react\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: []\n    };\n  }\n\n\n  componentDidMount() {\n    // for all items in state\n    for (let key in this.state) {\n        // if the key exists in localStorage\n        if (localStorage.hasOwnProperty(key)) {\n          // get the key's value from localStorage\n          let value = localStorage.getItem(key);\n  \n          // parse the localStorage string and setState\n          try {\n            value = JSON.parse(value);\n            this.setState({ [key]: value });\n          } catch (e) {\n            // handle empty string\n            this.setState({ [key]: value });\n          }\n        }\n      }\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    \n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({ [key]: value });\n\n    // update localStorage\n    //localStorage.setItem(key, value);\n  }\n\n\n  addItem() {\n    // create a new item\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n    };\n\n    // copy current list of items\n    const list = [...this.state.list];\n\n    // add the new item to the list\n    list.push(newItem);\n\n    // update state with new list, reset the new item input\n    this.setState({\n      list,\n      newItem: \"\"\n    });\n\n    //localStorage\n    //localStorage.setItem('list', JSON.stringify(list));\n    //localStorage.setItem('newItem', '');\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list];\n    // filter out the item being deleted\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({ list: updatedList });\n\n    //upadate localStorage\n    //localStorage.setItem('list', JSON.stringify(updatedList));\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          \n          <h1 className=\"App-title\">Welcome to React LocalStorage Tutorial</h1>\n        </header>\n        <div\n          style={{\n            padding: 50,\n            textAlign: \"left\",\n            maxWidth: 500,\n            margin: \"auto\"\n          }}\n        >\n          Add an item to the list\n          <br />\n          <input\n            type=\"text\"\n            placeholder=\"Type item here\"\n            value={this.state.newItem}\n            onChange={e => this.updateInput(\"newItem\", e.target.value)}\n          />\n          <button\n            onClick={() => this.addItem()}\n            disabled={!this.state.newItem.length}\n          >\n            &#43; Add\n          </button>\n          <br /> <br />\n          <ul>\n            {this.state.list.map(item => {\n              return (\n                <li key={item.id}>\n                  {item.value}\n                  <button onClick={() => this.deleteItem(item.id)}>\n                    Remove\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}