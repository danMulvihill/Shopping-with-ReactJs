{"ast":null,"code":"import _toConsumableArray from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dan/react-sites/shoppingApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dan/react-sites/shoppingApp/src/List2.js\";\nimport React, { Component } from \"react\";\nimport './styles/RecipeApp.css';\n\nvar List2App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(List2App, _Component);\n\n  function List2App(props) {\n    var _this;\n\n    _classCallCheck(this, List2App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(List2App).call(this, props));\n    _this.state = {\n      list: [{\n        id: 0,\n        ingredient: 'Eggs',\n        quantity: 1,\n        section: 'Refrigerated'\n      }],\n      newItem: \"\",\n      newQuantity: 1,\n      newSection: ''\n    };\n    return _this;\n  }\n\n  _createClass(List2App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // for all items in state\n      for (var key in this.state) {\n        // if the key exists in localStorage\n        if (localStorage.hasOwnProperty(key)) {\n          // get the key's value from localStorage\n          var value = localStorage.getItem(key); // parse the localStorage string and setState\n\n          try {\n            value = JSON.parse(value);\n            this.setState(_defineProperty({}, key, value));\n          } catch (e) {\n            // handle empty string\n            this.setState(_defineProperty({}, key, value));\n          }\n        }\n      } // add event listener to save state to localStorage\n      // when user leaves/refreshes the page\n\n\n      window.addEventListener(\"beforeunload\", this.saveStateToLocalStorage.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"beforeunload\", this.saveStateToLocalStorage.bind(this)); // saves if component has a chance to unmount\n\n      this.saveStateToLocalStorage();\n    }\n  }, {\n    key: \"saveStateToLocalStorage\",\n    value: function saveStateToLocalStorage() {\n      // for every item in React state\n      for (var key in this.state) {\n        // save to localStorage\n        localStorage.setItem(key, JSON.stringify(this.state[key]));\n      }\n    }\n  }, {\n    key: \"updateInput\",\n    value: function updateInput(key, value) {\n      // update react state\n      this.setState(_defineProperty({}, key, value));\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem() {\n      // create a new item\n      console.log(\" newSection?:\" + this.state.newQuantity);\n      var newItem = {\n        id: 1 + Math.random(),\n        value: this.state.newItem.slice(),\n        quantity: this.state.newQuantity.slice(),\n        section: this.state.newSection.slice()\n      };\n      console.log(\" mount value:\" + this.state.newItem);\n      console.log(\" mount value:\" + this.state.newSection); // copy current list of items\n\n      var list = _toConsumableArray(this.state.list);\n\n      console.log(this.state.list.length); //console.log(\"list:\"+this.state.list[0].section)\n      // add the new item to the list\n\n      list.push(newItem); // update state with new list, reset the new item input\n\n      this.setState({\n        list: list,\n        newItem: \"\",\n        newQuantity: \"1\",\n        newSection: \"\"\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      if (this.refs.title.value === \"\") {\n        alert('missing data');\n      } else {\n        this.setState({\n          list: {\n            id: 1 + Math.random(),\n            value: this.refs.title.value,\n            quantity: this.refs.quantity.value,\n            section: this.refs.section.value\n          }\n        });\n      }\n    }\n  }, {\n    key: \"deleteItem\",\n    value: function deleteItem(id) {\n      // copy current list of items\n      var list = _toConsumableArray(this.state.list); // filter out the item being deleted\n\n\n      var updatedList = list.filter(function (item) {\n        return item.id !== id;\n      });\n      this.setState({\n        list: updatedList\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var sectionOptions = this.props.sections.map(function (section) {\n        return React.createElement(\"option\", {\n          key: section,\n          value: \"section\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, section, \" \");\n      });\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Add Groceries Here\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        ref: \"quantity\",\n        min: \"1\",\n        class: \"num-input\",\n        placeholder: \"#\",\n        value: this.state.newQuantity,\n        onChange: function onChange(e) {\n          return _this2.updateInput(\"newQuantity\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        ref: \"value\",\n        placeholder: \"enter items here\",\n        value: this.state.newItem,\n        onChange: function onChange(e) {\n          return _this2.updateInput(\"newItem\", e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), console.log(this.state.list.length), this.state.list.length, \" items on list\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        ref: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"onChange=\", function (e) {\n        return _this2.updateInput(\"newSection\", e.target.value);\n      }, sectionOptions), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.addItem();\n        } //disabled={!this.state.newItem.length}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"+ Add\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, this.state.list.map(function (item) {\n        return React.createElement(\"li\", {\n          key: item.id,\n          className: \"list-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"list-item__container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"quantity-diplay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }, item.quantity, \" \"), \"| \", item.value), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"section-dislay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, item.section), React.createElement(\"button\", {\n          className: \"button x-button\",\n          onClick: function onClick() {\n            return _this2.deleteItem(item.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, \"X\"))));\n      }))));\n    }\n  }]);\n\n  return List2App;\n}(Component);\n\nList2App.defaultProps = {\n  sections: [\"Produce\", \"Refrigerated\", \"Frozen\", \"Pharma\", \"Other Food\", \"Other items (not food)\"]\n};\nexport default List2App;\n/*\n\n          <div class=\"checkbox-area\">\n            <label class=\"container-radio\">Produce\n                <input type=\"radio\" id =\"add\" name=\"foodtype\"\n                value={this.state.newItem} \n                 />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Refrigerated\n            <input type=\"radio\" id =\"add\" name =\"Refrigerated\" \n                value={this.state.newItem} />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Frozen\n            <input type=\"radio\"id=\"add\" name=\"Frozen\" \n                value={this.state.newItem} />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Pharmaceuticals\n            <input type=\"radio\"id=\"add\" name=\"Pharma\" \n                value={this.state.newItem} />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Other Food (food at room temp)\n            <input type=\"radio\" id =\"add\" name=\"foodtype\" \n                value={this.state.newItem} />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Other items (not food)\n             <input type=\"radio\" id =\"add\" name=\"foodtype\" \n                value={this.state.newItem} />\n                <span class=\"checkmark-radio\"></span>\n            </label>\n            onChange={e => this.updateInput(\"newItem\", e.target.value)}\n          </div>\n\n\n\n*/\n\n/*\n          <select \n          id=\"section-pick\" \n          name=\"section-pick\"\n          onChange={e=> this.updateInput(\"newSection\", e.target.value)}\n          >\n          <option value={this.state.newSection}>Produce</option>\n          <option value={this.state.newSection}>Refrigerated</option>\n          <option value={this.state.newSection}>Frozen</option>\n          <option value={this.state.newSection}>Pharma</option>\n          <option value={this.state.newSection} checked >Other</option>\n          <option value={this.state.newSection}>Nonfood</option>\n          </select>\n\n\n                    <input\n          type=\"text\" ref=\"sect\"\n          placeholder=\"enter section here\"\n          value={this.state.newSection}\n          onChange={e => this.updateInput(\"newSection\", e.target.value)}\n      \n\n*/","map":{"version":3,"sources":["/home/dan/react-sites/shoppingApp/src/List2.js"],"names":["React","Component","List2App","props","state","list","id","ingredient","quantity","section","newItem","newQuantity","newSection","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","e","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","setItem","stringify","console","log","Math","random","slice","length","push","refs","title","alert","updatedList","filter","item","sectionOptions","sections","map","handleSubmit","updateInput","target","addItem","deleteItem","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './styles/RecipeApp.css'\n\n\nclass List2App extends Component {\n\n  static defaultProps = {\n    sections: [\"Produce\", \"Refrigerated\", \"Frozen\", \"Pharma\", \"Other Food\", \"Other items (not food)\"]\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\n          { \n            id: 0,\n            ingredient: 'Eggs',\n            quantity: 1,\n            section: 'Refrigerated'\n          },\n      ],\n      newItem: \"\",\n      newQuantity: 1,\n      newSection: ''\n    };\n  }\n\n\n  componentDidMount() {\n    // for all items in state\n    for (let key in this.state) {\n        // if the key exists in localStorage\n        if (localStorage.hasOwnProperty(key)) {\n          // get the key's value from localStorage\n          let value = localStorage.getItem(key);\n  \n          // parse the localStorage string and setState\n          try {\n            value = JSON.parse(value);\n            this.setState({ [key]: value });\n            \n          } catch (e) {\n            // handle empty string\n            this.setState({ [key]: value });\n          }\n        }\n      }\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({ [key]: value });\n\n  }\n\n\n  addItem() {\n    \n    // create a new item\n    console.log(\" newSection?:\"+ this.state.newQuantity)\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice(),\n      quantity: this.state.newQuantity.slice(),\n      section: this.state.newSection.slice()\n    };\n    console.log(\" mount value:\"+ this.state.newItem)\n    console.log(\" mount value:\"+ this.state.newSection)\n    \n\n    // copy current list of items\n    const list = [...this.state.list];\n    console.log(this.state.list.length)\n    //console.log(\"list:\"+this.state.list[0].section)\n    // add the new item to the list\n    list.push(newItem);\n\n    // update state with new list, reset the new item input\n    this.setState({\n      list,\n      newItem: \"\",\n      newQuantity: \"1\",\n      newSection: \"\"\n    });\n\n  }\n\n  handleSubmit(e){\n    if(this.refs.title.value===\"\"){\n      alert('missing data')\n    }else{\n      this.setState({list:{\n        id: 1 + Math.random(),\n        value: this.refs.title.value,\n        quantity: this.refs.quantity.value,\n        section: this.refs.section.value\n      }})\n    }\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list];\n    // filter out the item being deleted\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({ list: updatedList });\n\n  }\n\n\n\n  render() {\n    let sectionOptions = this.props.sections.map(section =>{\n      return <option key={section} value=\"section\">{section} </option> \n    })   \n    return (\n      <div className=\"App\">\n        \n        <div className=\"container\">\n          <h3>Add Groceries Here</h3>\n          <br />\n          <form onSubmit={this.handleSubmit.bind(this)}>\n            <input\n              type = \"number\" ref=\"quantity\"\n              min = \"1\"\n              class = \"num-input\"\n              placeholder = \"#\"\n              value={this.state.newQuantity}\n              onChange={e=>this.updateInput(\"newQuantity\", e.target.value)}\n            />\n            <input\n              type=\"text\" ref=\"value\"\n              placeholder=\"enter items here\"\n              value={this.state.newItem}\n              onChange={e => this.updateInput(\"newItem\", e.target.value)}\n            />\n          \n\n            <br />\n            {console.log(this.state.list.length)}\n            {this.state.list.length} items on list\n            <br />\n\n            <select ref=\"section\">\n            onChange={e => this.updateInput(\"newSection\", e.target.value)}\n              {sectionOptions}\n            </select>\n            \n\n            <button\n              onClick={() => this.addItem()}\n              //disabled={!this.state.newItem.length}\n            >\n              &#43; Add\n            </button>\n            \n          </form>\n          <br /> <br />\n          <ul>\n            {this.state.list.map(item => {\n              return (\n                <li key={item.id} className=\"list-item\">\n                <div className=\"list-item__container\">\n                  <div> \n                   <span className=\"quantity-diplay\">{item.quantity} </span>  \n                     | {item.value}\n                  </div> \n                  <div>   \n                    <span className=\"section-dislay\">{item.section}</span>\n                    <button \n                      className = \"button x-button\"   \n                      onClick={() => this.deleteItem(item.id)}>\n                      X\n                    </button>\n                  </div>\n                </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default List2App;\n\n\n/*\n\n          <div class=\"checkbox-area\">\n            <label class=\"container-radio\">Produce\n                <input type=\"radio\" id =\"add\" name=\"foodtype\"\n                value={this.state.newItem} \n                 />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Refrigerated\n            <input type=\"radio\" id =\"add\" name =\"Refrigerated\" \n                value={this.state.newItem} />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Frozen\n            <input type=\"radio\"id=\"add\" name=\"Frozen\" \n                value={this.state.newItem} />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Pharmaceuticals\n            <input type=\"radio\"id=\"add\" name=\"Pharma\" \n                value={this.state.newItem} />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Other Food (food at room temp)\n            <input type=\"radio\" id =\"add\" name=\"foodtype\" \n                value={this.state.newItem} />\n            <span class=\"checkmark-radio\"></span>\n            </label>\n            <label class=\"container-radio\">Other items (not food)\n             <input type=\"radio\" id =\"add\" name=\"foodtype\" \n                value={this.state.newItem} />\n                <span class=\"checkmark-radio\"></span>\n            </label>\n            onChange={e => this.updateInput(\"newItem\", e.target.value)}\n          </div>\n\n\n\n*/\n\n\n/*\n          <select \n          id=\"section-pick\" \n          name=\"section-pick\"\n          onChange={e=> this.updateInput(\"newSection\", e.target.value)}\n          >\n          <option value={this.state.newSection}>Produce</option>\n          <option value={this.state.newSection}>Refrigerated</option>\n          <option value={this.state.newSection}>Frozen</option>\n          <option value={this.state.newSection}>Pharma</option>\n          <option value={this.state.newSection} checked >Other</option>\n          <option value={this.state.newSection}>Nonfood</option>\n          </select>\n\n\n                    <input\n          type=\"text\" ref=\"sect\"\n          placeholder=\"enter section here\"\n          value={this.state.newSection}\n          onChange={e => this.updateInput(\"newSection\", e.target.value)}\n      \n\n*/"]},"metadata":{},"sourceType":"module"}